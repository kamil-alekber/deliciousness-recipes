// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package recipes

import (
	"context"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO
    recipes (id, name, description)
VALUES
    (?, ?, ?) RETURNING id, name, description
`

type CreateRecipeParams struct {
	ID          int64
	Name        string
	Description string
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (*Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe, arg.ID, arg.Name, arg.Description)
	var i Recipe
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return &i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes
WHERE
    id = ?
`

func (q *Queries) DeleteRecipe(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, id)
	return err
}

const getRecipe = `-- name: GetRecipe :one
SELECT
    id, name, description
FROM
    recipes
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetRecipe(ctx context.Context, id int64) (*Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return &i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT
    id, name, description
FROM
    recipes
ORDER BY
    name DESC
`

func (q *Queries) ListRecipes(ctx context.Context) ([]*Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipe = `-- name: UpdateRecipe :exec
UPDATE recipes
SET
    name = ?,
    description = ?
WHERE
    id = ?
`

type UpdateRecipeParams struct {
	Name        string
	Description string
	ID          int64
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) error {
	_, err := q.db.ExecContext(ctx, updateRecipe, arg.Name, arg.Description, arg.ID)
	return err
}
