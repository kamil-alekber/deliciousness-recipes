// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package tokens

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO
    tokens (
        access_token,
        refresh_token,
        token_type,
        expiry,
        expires_in,
        vendor,
        user_id
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?) RETURNING access_token, refresh_token, token_type, expiry, expires_in, vendor, created_at, user_id
`

type CreateTokenParams struct {
	AccessToken  string
	RefreshToken string
	TokenType    string
	Expiry       time.Time
	ExpiresIn    int64
	Vendor       string
	UserID       string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (*Token, error) {
	row := q.db.QueryRowContext(ctx, createToken,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenType,
		arg.Expiry,
		arg.ExpiresIn,
		arg.Vendor,
		arg.UserID,
	)
	var i Token
	err := row.Scan(
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenType,
		&i.Expiry,
		&i.ExpiresIn,
		&i.Vendor,
		&i.CreatedAt,
		&i.UserID,
	)
	return &i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE
    expiry < NOW ()
`

func (q *Queries) DeleteToken(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteToken)
	return err
}

const getToken = `-- name: GetToken :one
SELECT
    access_token, refresh_token, token_type, expiry, expires_in, vendor, created_at, user_id
FROM
    tokens
WHERE
    user_id = ?
    and vendor = ?
    and expiry > NOW ()
ORDER BY
    created_at DESC
LIMIT
    1
`

type GetTokenParams struct {
	UserID string
	Vendor string
}

func (q *Queries) GetToken(ctx context.Context, arg GetTokenParams) (*Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, arg.UserID, arg.Vendor)
	var i Token
	err := row.Scan(
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenType,
		&i.Expiry,
		&i.ExpiresIn,
		&i.Vendor,
		&i.CreatedAt,
		&i.UserID,
	)
	return &i, err
}

const listTokens = `-- name: ListTokens :many
SELECT
    access_token, refresh_token, token_type, expiry, expires_in, vendor, created_at, user_id
FROM
    tokens
ORDER BY
    created_at DESC
`

func (q *Queries) ListTokens(ctx context.Context) ([]*Token, error) {
	rows, err := q.db.QueryContext(ctx, listTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.AccessToken,
			&i.RefreshToken,
			&i.TokenType,
			&i.Expiry,
			&i.ExpiresIn,
			&i.Vendor,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
